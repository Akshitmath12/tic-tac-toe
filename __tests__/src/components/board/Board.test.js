// Test generated by RoostGPT for test reactTesting using AI Type Open AI and AI Model gpt-4-1106-preview


import React from 'react';
import { render, cleanup, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import Board from '../../../../src/components/board/Board';

describe('Board component', () => {
  const mockOnClick = jest.fn();
  const mockJumpTo = jest.fn();
  const squares = Array(9).fill(null);

  beforeEach(() => {
    cleanup();
    jest.clearAllMocks();
  });

  test('renders Board with default props', () => {
    const { getByText, getAllByRole } = render(
      <Board squares={squares} onClick={mockOnClick} jumpTo={mockJumpTo} />
    );
    expect(getAllByRole('button')).toHaveLength(10); // 9 Squares + 1 Restart button
    expect(getByText('Restart the game')).toBeInTheDocument();
  });

  test('calls onClick when a Square is clicked', () => {
    const { getAllByRole } = render(
      <Board squares={squares} onClick={mockOnClick} jumpTo={mockJumpTo} />
    );
    const squareButtons = getAllByRole('button');
    fireEvent.click(squareButtons[0]);
    expect(mockOnClick).toHaveBeenCalledWith(0);
  });

  test('calls jumpTo when the restart button is clicked', () => {
    const { getByText } = render(
      <Board squares={squares} onClick={mockOnClick} jumpTo={mockJumpTo} />
    );
    fireEvent.click(getByText('Restart the game'));
    expect(mockJumpTo).toHaveBeenCalledWith(0);
  });

  // Add more test cases as necessary for different props, edge cases, handling errors etc.
});

