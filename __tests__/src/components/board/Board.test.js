// Test generated by RoostGPT for test ticTacToe using AI Type Open AI and AI Model gpt-4-1106-preview

// __tests__/src/components/board/Board.test.js
import React from "react";
import { render, cleanup, fireEvent } from "@testing-library/react";
import "@testing-library/jest-dom/extend-expect";
import Board from "../../../../src/components/board/Board";

describe("Board Component", () => {
  afterEach(cleanup);

  test("renders the correct number of squares", () => {
    const squares = Array(9).fill(null);
    const { getAllByRole } = render(
      <Board squares={squares} onClick={jest.fn()} jumpTo={jest.fn()} />
    );
    expect(getAllByRole("button")).toHaveLength(9); // Assuming each Square is a button
  });

  test("passes the correct value to each square", () => {
    const squares = ["X", "O", null, "X", "O", null, "X", "O", "X"];
    const { getAllByRole } = render(
      <Board squares={squares} onClick={jest.fn()} jumpTo={jest.fn()} />
    );
    const renderedSquares = getAllByRole("button");
    renderedSquares.forEach((square, i) => {
      expect(square).toHaveTextContent(squares[i]);
    });
  });

  test("calls onClick when a square is clicked", () => {
    const squares = Array(9).fill(null);
    const onClick = jest.fn();
    const { getAllByRole } = render(
      <Board squares={squares} onClick={onClick} jumpTo={jest.fn()} />
    );
    const button = getAllByRole("button")[0];
    fireEvent.click(button);
    expect(onClick).toHaveBeenCalledWith(0);
  });

  test("calls jumpTo with 0 when restart button is clicked", () => {
    const jumpTo = jest.fn();
    const { getByText } = render(
      <Board
        squares={Array(9).fill(null)}
        onClick={jest.fn()}
        jumpTo={jumpTo}
      />
    );
    fireEvent.click(getByText(/restart the game/i));
    expect(jumpTo).toHaveBeenCalledWith(0);
  });
});
