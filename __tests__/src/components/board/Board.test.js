// Test generated by RoostGPT for test ticTacToe using AI Type Open AI and AI Model gpt-4-1106-preview

import React from 'react';
import { render, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import Board from '../../../../src/components/board/Board';

describe('Board Component', () => {
  // Here I'll add a mock function for the onClick prop
  const mockOnClick = jest.fn();
  const mockJumpTo = jest.fn();

  // Initialize default props which can be overwritten or extended in test cases
  const defaultProps = {
    squares: Array(9).fill(null),
    onClick: mockOnClick,
    jumpTo: mockJumpTo,
  }

  test('renders 9 squares', () => {
    const { getAllByRole } = render(<Board {...defaultProps} />);
    const buttons = getAllByRole('button');
    expect(buttons).toHaveLength(9); // 9 Square components should render as buttons
  });

  test('calls "onClick" prop when square is clicked', () => {
    const { getAllByRole } = render(<Board {...defaultProps} />);
    const squareButtons = getAllByRole('button');
    
    fireEvent.click(squareButtons[0]); // Simulate clicking the first square
    expect(mockOnClick).toHaveBeenCalledWith(0); // Expect the first square's index (0) to be passed
  });

  test('calls "jumpTo" prop when restart button is clicked', () => {
    const { getByText } = render(<Board {...defaultProps} />);
    const restartButton = getByText(/restart the game/i);
    
    fireEvent.click(restartButton); // Simulate clicking the restart button
    expect(mockJumpTo).toHaveBeenCalledWith(0); // Expect 'jumpTo' to be called with parameter 0
  });
  
  // Additional test cases can be added to cover other scenarios
  
});

