// Test generated by RoostGPT for test ticTacToe using AI Type Open AI and AI Model gpt-4-1106-preview

import React from 'react';
import { render, cleanup } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import GameInfo from '../../../components/game-info/GameInfo';

describe('GameInfo Component', () => {
  afterEach(cleanup);

  // Test case 1: Display "It's your turn, player X" when it is X's turn and no winner
  test('displays player X\'s turn correctly when xIsNext is true and there is no winner', () => {
    const { getByText } = render(<GameInfo status="" winner={null} xIsNext={true} />);
    expect(getByText("It's your turn, player X")).toBeInTheDocument();
  });

  // Test case 2: Display "Now you, player O!" when it is O's turn and no winner
  test('displays player O\'s turn correctly when xIsNext is false and there is no winner', () => {
    const { getByText } = render(<GameInfo status="" winner={null} xIsNext={false} />);
    expect(getByText("Now you, player O!")).toBeInTheDocument();
  });

  // Test case 3: Display "Nice! I won!" for player X when there is a winner X
  test('displays winner announcement for player X', () => {
    const { getByText } = render(<GameInfo status="Winner: X" winner={'X'} xIsNext={false} />);
    expect(getByText("Nice! I won!")).toBeInTheDocument();
  });

  // Test case 4: Display "Wohoo! I made it!" for player O when there is a winner O
  test('displays winner announcement for player O', () => {
    const { getByText } = render(<GameInfo status="Winner: O" winner={'O'} xIsNext={true} />);
    expect(getByText("Wohoo! I made it!")).toBeInTheDocument();
  });

  // Test case 5: Ensure the friend's image is rendered
  test('renders friends image', () => {
    const { getByAltText } = render(<GameInfo status="" winner={null} xIsNext={true} />);
    expect(getByAltText("Player X and Player O")).toBeInTheDocument();
  });
});

