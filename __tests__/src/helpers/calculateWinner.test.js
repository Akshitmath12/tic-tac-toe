// Test generated by RoostGPT for test ticTacToe using AI Type Open AI and AI Model gpt-4-1106-preview

// __tests__/src/helpers/calculateWinner.test.js

import calculateWinner from '../../../src/helpers/calculateWinner';

describe('calculateWinner function', () => {
    test('should correctly identify the winner for a horizontal line', () => {
        const squares = ['X', 'X', 'X', null, 'O', null, 'O', null, null];
        expect(calculateWinner(squares)).toBe('X');
    });

    test('should correctly identify the winner for a vertical line', () => {
        const squares = ['O', 'X', null, 'O', 'X', null, 'O', null, null];
        expect(calculateWinner(squares)).toBe('O');
    });

    test('should correctly identify the winner for a diagonal line', () => {
        const squares = ['X', 'O', null, null, 'X', 'O', null, null, 'X'];
        expect(calculateWinner(squares)).toBe('X');
    });

    test('should return null when there is no winner', () => {
        const squares = ['X', 'X', 'O', 'O', 'O', 'X', 'X', 'O', 'X'];
        expect(calculateWinner(squares)).toBeNull();
    });

    test('should return null for an incomplete board without a winner', () => {
        const squares = [null, null, null, 'O', 'X', null, null, null, null];
        expect(calculateWinner(squares)).toBeNull();
    });

    test('should return null for an empty board', () => {
        const squares = [null, null, null, null, null, null, null, null, null];
        expect(calculateWinner(squares)).toBeNull();
    });
    
    // If you want to test error conditions or edge cases, you can include more tests here
});


