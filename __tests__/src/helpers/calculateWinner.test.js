// Test generated by RoostGPT for test ticTacToe using AI Type Open AI and AI Model gpt-4-1106-preview

import calculateWinner from '../../../src/helpers/calculateWinner';

describe('calculateWinner', () => {
  // Test for no winner
  test('should return null when there is no winner', () => {
    const squares = [null, null, null, null, null, null, null, null, null];
    expect(calculateWinner(squares)).toBe(null);
  });

  // Test for a winner
  test('should return the winner if there are three in a row', () => {
    const squares = ['X', 'X', 'X', null, null, null, null, null, null];
    expect(calculateWinner(squares)).toBe('X');
  });

  // Test for another winner situation with different line
  test('should return the winner for vertical line', () => {
    const squares = [null, 'O', null, null, 'O', null, null, 'O', null];
    expect(calculateWinner(squares)).toBe('O');
  });

  // Test for a draw situation (no winner, no nulls)
  test('should return null on a draw', () => {
    const squares = ['X', 'X', 'O', 'O', 'O', 'X', 'X', 'O', 'X'];
    expect(calculateWinner(squares)).toBe(null);
  });

  // Test to verify that the first winning line encountered is the one returned
  test('should return the winner on the first winning line', () => {
    const squares = ['X', 'X', 'X', 'O', 'O', null, null, null, 'O'];
    expect(calculateWinner(squares)).toBe('X');
  });
  
  // Test for winner in case of a diagonal winning
  test('should return the winner for diagonal line', () => {
    const squares = ['X', null, null, null, 'X', null, null, null, 'X'];
    expect(calculateWinner(squares)).toBe('X');
  });

  // Test invalid input
  test('should return null for invalid input', () => {
    const squares = 'not an array';
    expect(calculateWinner(squares)).toBe(null);
  });
});

