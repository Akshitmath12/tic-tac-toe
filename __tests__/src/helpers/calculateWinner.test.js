// Test generated by RoostGPT for test reactTesting using AI Type Open AI and AI Model gpt-4-1106-preview


// __tests__/src/helpers/calculateWinner.test.js
import calculateWinner from '../../../src/helpers/calculateWinner';

describe('calculateWinner', () => {
  
  test('should return the winner for the first row', () => {
    const squares = ['X', 'X', 'X', null, null, null, null, null, null];
    expect(calculateWinner(squares)).toBe('X');
  });

  test('should return the winner for the first column', () => {
    const squares = ['O', null, null, 'O', null, null, 'O', null, null];
    expect(calculateWinner(squares)).toBe('O');
  });

  test('should return the winner for the diagonal', () => {
    const squares = ['X', null, null, null, 'X', null, null, null, 'X'];
    expect(calculateWinner(squares)).toBe('X');
  });

  test('should return null when there is no winner', () => {
    const squares = ['X', 'O', 'X', 'X', 'O', 'O', 'O', 'X', 'X'];
    expect(calculateWinner(squares)).toBe(null);
  });

  test('should return null for an incomplete board with no winner', () => {
    const squares = ['X', null, null, 'X', 'O', null, null, null, null];
    expect(calculateWinner(squares)).toBe(null);
  });

  test('should handle invalid argument types', () => {
    expect(() => calculateWinner(null)).toThrow(TypeError);
    expect(() => calculateWinner(undefined)).toThrow(TypeError);
  });

});

