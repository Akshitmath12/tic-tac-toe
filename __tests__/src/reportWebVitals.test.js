// Test generated by RoostGPT for test ticTacToe using AI Type Open AI and AI Model gpt-4-1106-preview

// __tests__/src/reportWebVitals.test.js
import reportWebVitals from '../../src/reportWebVitals';

// Mocking the 'web-vitals' module
jest.mock('web-vitals', () => ({
  getCLS: jest.fn(),
  getFID: jest.fn(),
  getFCP: jest.fn(),
  getLCP: jest.fn(),
  getTTFB: jest.fn(),
}));

describe('reportWebVitals', () => {
  beforeEach(() => {
    // Clear all mock instances and calls before each test
    jest.clearAllMocks();
  });

  test('does nothing if onPerfEntry is not provided', () => {
    reportWebVitals(undefined);
    expect(require('web-vitals').getCLS).not.toHaveBeenCalled();
    expect(require('web-vitals').getFID).not.toHaveBeenCalled();
    expect(require('web-vitals').getFCP).not.toHaveBeenCalled();
    expect(require('web-vitals').getLCP).not.toHaveBeenCalled();
    expect(require('web-vitals').getTTFB).not.toHaveBeenCalled();
  });

  test('does nothing if onPerfEntry is not a function', () => {
    reportWebVitals({});
    expect(require('web-vitals').getCLS).not.toHaveBeenCalled();
    expect(require('web-vitals').getFID).not.toHaveBeenCalled();
    expect(require('web-vitals').getFCP).not.toHaveBeenCalled();
    expect(require('web-vitals').getLCP).not.toHaveBeenCalled();
    expect(require('web-vitals').getTTFB).not.toHaveBeenCalled();
  });

  test('calls web vital functions if onPerfEntry is a function', () => {
    const mockOnPerfEntry = jest.fn();
    reportWebVitals(mockOnPerfEntry);
    expect(require('web-vitals').getCLS).toHaveBeenCalledWith(mockOnPerfEntry);
    expect(require('web-vitals').getFID).toHaveBeenCalledWith(mockOnPerfEntry);
    expect(require('web-vitals').getFCP).toHaveBeenCalledWith(mockOnPerfEntry);
    expect(require('web-vitals').getLCP).toHaveBeenCalledWith(mockOnPerfEntry);
    expect(require('web-vitals').getTTFB).toHaveBeenCalledWith(mockOnPerfEntry);
  });
});

