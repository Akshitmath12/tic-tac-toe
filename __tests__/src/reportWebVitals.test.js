// Test generated by RoostGPT for test ticTacToe using AI Type Open AI and AI Model gpt-4-1106-preview

// __tests__/src/reportWebVitals.test.js
import reportWebVitals from '../../src/reportWebVitals';

// Mocking the web-vitals module.
jest.mock('web-vitals', () => ({
  getCLS: jest.fn(),
  getFID: jest.fn(),
  getFCP: jest.fn(),
  getLCP: jest.fn(),
  getTTFB: jest.fn(),
}));

describe('reportWebVitals', () => {
  test('does not call any web vitals when no parameter is provided', () => {
    reportWebVitals();
    expect(require('web-vitals').getCLS).not.toHaveBeenCalled();
    expect(require('web-vitals').getFID).not.toHaveBeenCalled();
    expect(require('web-vitals').getFCP).not.toHaveBeenCalled();
    expect(require('web-vitals').getLCP).not.toHaveBeenCalled();
    expect(require('web-vitals').getTTFB).not.toHaveBeenCalled();
  });

  test('does not call any web vitals when parameter is not a function', () => {
    reportWebVitals({});
    expect(require('web-vitals').getCLS).not.toHaveBeenCalled();
    expect(require('web-vitals').getFID).not.toHaveBeenCalled();
    expect(require('web-vitals').getFCP).not.toHaveBeenCalled();
    expect(require('web-vitals').getLCP).not.toHaveBeenCalled();
    expect(require('web-vitals').getTTFB).not.toHaveBeenCalled();
  });

  test('calls web vitals when a function is provided as parameter', () => {
    const onPerfEntry = jest.fn();
    reportWebVitals(onPerfEntry);
    // Since the web vitals functions are Promise-based, they are not called immediately.
    // We would usually use async/await with actual testing, but here we are simulating using mocks.
    expect(require('web-vitals').getCLS).toHaveBeenCalledWith(onPerfEntry);
    expect(require('web-vitals').getFID).toHaveBeenCalledWith(onPerfEntry);
    expect(require('web-vitals').getFCP).toHaveBeenCalledWith(onPerfEntry);
    expect(require('web-vitals').getLCP).toHaveBeenCalledWith(onPerfEntry);
    expect(require('web-vitals').getTTFB).toHaveBeenCalledWith(onPerfEntry);
  });
});

